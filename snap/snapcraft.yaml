name: ruff
version: git
summary: An extremely fast Python linter, written in Rust.
# noinspection YAMLSchemaValidation
# https://youtrack.jetbrains.com/issue/PY-58754
description: |
  Ruff aims to be orders of magnitude faster than alternative tools while integrating more
  functionality behind a single, common interface.

  Ruff can be used to replace [Flake8](https://pypi.org/project/flake8/) (plus a variety of plugins), [`isort`](https://pypi.org/project/isort/),
  [`pydocstyle`](https://pypi.org/project/pydocstyle/), [`yesqa`](https://github.com/asottile/yesqa),
  [`eradicate`](https://pypi.org/project/eradicate/), [`pyupgrade`](https://pypi.org/project/pyupgrade/),
  and [`autoflake`](https://pypi.org/project/autoflake/), all while executing tens or hundreds of
  times faster than any individual tool.

  Ruff goes beyond the responsibilities of a traditional linter, instead functioning as an advanced
  code transformation tool capable of upgrading type annotations, rewriting class definitions, sorting
  imports, and more.

confinement: strict
base: core22
# Performance difference with xz vs lzo is small in this case, but provides
# a ~40% reduction in file size for a very frequently updating snap.
compression: xz
contact: https://github.com/lengau/ruff/issues
issues:
  - https://github.com/lengau/ruff/issues
  - https://github.com/charliermarsh/ruff/issues
source-code: https://github.com/lengau/ruff
website: https://github.com/charliermarsh/ruff
architectures:
# The dependency `ring` doesn't support building on ppc64el or s390x. However, ruff supports building for those platforms from amd64
# https://github.com/charliermarsh/ruff/blob/7a83b65fbeed85a51975fc31d3c292ff192fb2ef/.github/workflows/ruff.yaml#L128
  - build-on: [ amd64, i386, arm64, armhf ]
    build-for: amd64
  - build-on: [ amd64, i386, arm64, armhf ]
    build-for: i386
  - build-on: [ amd64, i386, arm64, armhf ]
    build-for: arm64
  - build-on: [ amd64, i386, arm64, armhf ]
    build-for: armhf
  - build-on: [ amd64 ]
    build-for: s390x
  - build-on: [ amd64 ]
    build-for: ppc64el

parts:
  ruff:
    plugin: rust
    source: .
    # The rust plugin doesn't currently support multiple paths.
    # Before we can actually do this, either the plugin updates or we need to make
    # two parts. For now though we're overriding the build steps anyway.
    rust-path:
      - ruff_cli
      - flake8_to_ruff
    build-environment:
      - CARGO_INSTALL_ROOT: "${CRAFT_PART_INSTALL}"
      - CARGO_BUILD_JOBS: "${SNAPCRAFT_PARALLEL_BUILD_COUNT}"
    # The rust plugin currently does not support cross-compiling.
    # Until it does, we're overriding the build steps and doing it ourselves.
    override-build: |
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path --profile=minimal
      case "${CRAFT_TARGET_ARCH}" in
      amd64)
        export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu
        ;;
      i386)
        export CARGO_BUILD_TARGET=i686-unknown-linux-gnu
        ;;
      arm64)
        export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu
        ;;
      armhf)
        export CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf
        ;;
      s390x)
        export CARGO_BUILD_TARGET=s390x-unknown-linux-gnu
        ;;
      ppc64el)
        export CARGO_BUILD_TARGET=powerpc64le-unknown-linux-gnu
        ;;
      esac
      cargo install --locked --no-default-features --path ruff_cli
      cargo install --locked --path flake8_to_ruff

apps:
  ruff:
    command: bin/ruff
    plugs:
      - home
  flake8-to-ruff:
    command: bin/flake8-to-ruff
    plugs:
      - home
